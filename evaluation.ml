(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
	   
    (* the type of values (including closures) stored in
       environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env)

    let lookup (env : env) (varname : varid) : value =
      try !(List.assoc varname env)
      with Not_found -> raise (EvalError ("Unbound variable: " ^ varname))

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: (List.remove_assoc varname env)
 
    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val e -> exp_to_concrete_string e
      | Closure (e, _env) -> if printenvp then
                             env_to_string _env ^ " âŠ¢ " ^ exp_to_concrete_string e
                             else exp_to_concrete_string e
    and env_to_string (env : env) : string =
      match env with 
      | [] -> ""
      | (name, loc) :: tl -> 
          "[" ^ name ^ " -> " ^ value_to_string !loc ^ env_to_string tl ^ "]"
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
  
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)

let val_to_exp (value : Env.value) : expr = 
  match value with
  | Env.Val e -> e
  | Env.Closure (e, _) -> e
;;

let eval_unop (u : unop) (e1 : expr) : expr = 
  match u, e1 with
  | Negate, Num n -> Num (~-n)
  | Negate, _ -> raise (EvalError "Negate expects a number")
  | FloatNegate, Float n -> Float (~-.n)
  | FloatNegate, _ -> raise (EvalError "NegateFloat expects a float")
  | Not, Bool b -> Bool (not b)
  | Not, _ -> raise (EvalError "Not expects a boolean")
  | Sine, Num n -> Float (sin (float_of_int n))
  | Sine, Float f -> Float (sin f)
  | Sine, _ -> raise (EvalError "Sine expects a float")
  | Cosine, Num n -> Float (cos (float_of_int n))
  | Cosine, Float f -> Float (cos f)
  | Cosine, _ -> raise (EvalError "Cosine expects a float")
  | Tangent, Num n -> Float (tan (float_of_int n))
  | Tangent, Float f -> Float (tan f)
  | Tangent, _ -> raise (EvalError "Tangent expects a float")
  | NaturalLog, Num n -> Float (log (float_of_int n))
  | NaturalLog, Float f -> Float (log f)
  | NaturalLog, _ -> raise (EvalError "NaturalLog expects a float")

let eval_binop (b : binop) (e1 : expr) (e2 : expr) : expr = 
  match b, e1, e2 with
  | Plus, Num n1, Num n2 -> Num (n1 + n2)
  | Plus, _, _ -> raise (EvalError "Plus expects two numbers")
  | FloatPlus, Float n1, Float n2 -> Float (n1 +. n2)
  | FloatPlus, _, _ -> raise (EvalError "FloatPlus expects two floats")
  | Minus, Num n1, Num n2 -> Num (n1 - n2)
  | Minus, _, _ -> raise (EvalError "Minus expects two numbers")
  | FloatMinus, Float n1, Float n2 -> Float (n1 -. n2)
  | FloatMinus, _, _ -> raise (EvalError "FloatMinus expects two floats")
  | Times, Num n1, Num n2 -> Num (n1 * n2)
  | Times, _, _ -> raise (EvalError "Times expects two numbers")
  | FloatTimes, Float n1, Float n2 -> Float (n1 *. n2)
  | FloatTimes, _, _ -> raise (EvalError "FloatTimes expects two floats")
  | Divide, Num n1, Num n2 -> Num (n1 / n2)
  | Divide, _, _ -> raise (EvalError "Divide expects two numbers")
  | FloatDivide, Float n1, Float n2 -> Float (n1 /. n2)
  | FloatDivide, _, _ -> raise (EvalError "FloatDivide expects two floats")
  | Power, Num n1, Num n2 -> Num (int_of_float (float_of_int n1 ** float_of_int n2))
  | Power, Float n1, Float n2 -> Float (n1 ** n2)
  | Power, _, _ -> raise (EvalError "Power expects two numbers")
  | Equals, e1, e2 -> Bool (e1 = e2)
  | NotEquals, e1, e2 -> Bool (e1 <> e2)
  | LessThan, Num n1, Num n2 -> Bool (n1 < n2)
  | LessThan, Float n1, Float n2 -> Bool (n1 < n2)
  | LessThan, Bool b1, Bool b2 -> Bool (b1 < b2)
  | LessThan, _, _ -> raise (EvalError "LessThan expects two numbers")
  | LessThanOrEqual, Num n1, Num n2 -> Bool (n1 <= n2)
  | LessThanOrEqual, Float n1, Float n2 -> Bool (n1 <= n2)
  | LessThanOrEqual, Bool b1, Bool b2 -> Bool (b1 <= b2)
  | LessThanOrEqual, _, _ -> raise (EvalError "LessThanOrEquals expects two numbers")
  | GreaterThan, Num n1, Num n2 -> Bool (n1 > n2)
  | GreaterThan, Float n1, Float n2 -> Bool (n1 > n2)
  | GreaterThan, Bool b1, Bool b2 -> Bool (b1 > b2)
  | GreaterThan, _, _ -> raise (EvalError "GreaterThan expects two numbers")
  | GreaterThanOrEqual, Num n1, Num n2 -> Bool (n1 >= n2)
  | GreaterThanOrEqual, Float n1, Float n2 -> Bool (n1 >= n2)
  | GreaterThanOrEqual, Bool b1, Bool b2 -> Bool (b1 >= b2)
  | GreaterThanOrEqual, _, _ -> raise (EvalError "GreaterThanOrEquals expects two numbers")
  | Concat, String s1, String s2 -> String (s1 ^ s2)
  | Concat, _, _ -> raise (EvalError "Concat expects two strings")
;;

let eval_conditional (eval : expr -> Env.env -> Env.value) 
                     (e1 : expr) 
                     (e2 : expr) 
                     (e3 : expr) 
                     (_env : Env.env)
                     : Env.value = 
  match val_to_exp (eval e1 _env) with
  | Bool true -> eval e2 _env
  | Bool false -> eval e3 _env
  | _ -> raise (EvalError "Conditional expects a boolean")
   
let rec eval_s (_exp : expr) (_env : Env.env) : Env.value =
  match _exp with
  | Var _ -> raise (EvalError "Unbound variable")
  | Num _ 
  | Float _
  | Bool _ 
  | String _
  | Fun _ -> Env.Val _exp
  | Unop (u, e) -> 
      let e' = val_to_exp (eval_s e _env) in 
      Env.Val (eval_unop u e')
  | Binop (b, e1, e2) ->
      let e1' = val_to_exp (eval_s e1 _env) in 
      let e2' = val_to_exp (eval_s e2 _env) in 
      Env.Val (eval_binop b e1' e2')
  | Conditional (e1, e2, e3) -> eval_conditional eval_s e1 e2 e3 _env
  | Let (v, e1, e2) -> 
     let e' = val_to_exp (eval_s e1 _env) in 
     eval_s (subst v e' e2) _env
  | Letrec (v, e1, e2) ->
     let e1' = val_to_exp (eval_s e1 _env) in
     let sub_e1' = subst v (Letrec (v, e1', Var v)) e1' in
     let b_sub = subst v sub_e1' e2 in
     eval_s b_sub _env
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "Unassigned")
  | App (e1, e2) -> 
     (match eval_s e1 _env with
     | Env.Val (Fun (v, e)) -> 
        let e2' = val_to_exp (eval_s e2 _env) in
          eval_s (subst v e2' e) _env
     | _ -> raise (EvalError "App expects a function"))
;;

type scope = 
   | Dynamic
   | Lexical
;;

let rec eval_scope (_exp : expr) (_env : Env.env) (_scope : scope) : Env.value = 
   match _exp with 
   | Var v -> Env.lookup _env v
   | Num _
   | Float _
   | Bool _
   | String _ -> Env.Val _exp
   | Unop (u, e) -> 
      let e' = val_to_exp (eval_scope e _env _scope) in 
      Env.Val (eval_unop u e')
   | Binop (b, e1, e2) ->
      let e1' = val_to_exp (eval_scope e1 _env _scope) in 
      let e2' = val_to_exp (eval_scope e2 _env _scope) in 
      Env.Val (eval_binop b e1' e2')
   | Conditional (e1, e2, e3) -> 
      (match _scope with 
       | Dynamic -> eval_conditional eval_d e1 e2 e3 _env
       | Lexical -> eval_conditional eval_l e1 e2 e3 _env)
   | Fun (v, e) -> 
      (match _scope with 
       | Dynamic -> Env.Val (Fun (v, e))
       | Lexical -> Env.Closure (Fun (v, e), _env))
   | Let (v, e1, e2) -> 
      (match _scope with 
       | Dynamic -> let e1' = ref (eval_d e1 _env) in 
                    let new_env = Env.extend _env v e1' in
                    eval_d e2 new_env
       | Lexical -> let e1' = ref (eval_l e1 _env) in 
                    let new_env = Env.extend _env v e1' in
                    eval_l e2 new_env)
   | Letrec (v, e1, e2) -> 
      (match _scope with
       | Dynamic -> let e1' = ref (eval_d e1 _env) in 
                    let new_env = Env.extend _env v e1' in
                    eval_d e2 new_env
       | Lexical -> let reference = ref (Env.Val Unassigned) in
                    let new_env = Env.extend _env v reference in
                    let e1' = eval_l e1 new_env in
                    if e1' = Env.Val Unassigned then raise (EvalError "Unassigned")
                    else reference := e1'; 
                         eval_l e2 new_env)
   | Raise -> raise EvalException
   | Unassigned -> raise (EvalError "Unassigned")
   | App (e1, e2) -> 
      match _scope with 
       | Dynamic -> 
         (match eval_d e1 _env with
          | Env.Val (Fun (v, e)) -> 
             let e2' = ref (eval_d e2 _env) in 
             let new_env = Env.extend _env v e2' in
             eval_d e new_env
          | _ -> raise (EvalError "App expects a function"))
       | Lexical -> 
         (match eval_l e1 _env with
          | Env.Closure (Fun (v, e), env) -> 
            let e2' = ref (eval_l e2 env) in 
            let new_env = Env.extend env v e2' in
            eval_l e new_env
          | _ -> raise (EvalError "App expects a function"))

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
and eval_d (_exp : expr) (_env : Env.env) : Env.value = 
   eval_scope _exp _env Dynamic 

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)

and eval_l (_exp : expr) (_env : Env.env) : Env.value = 
   eval_scope _exp _env Lexical
;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;

(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_d ;;
